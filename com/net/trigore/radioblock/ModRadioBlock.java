package com.net.trigore.radioblock;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;

import com.net.trigore.radioblock.player.MP3Player;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStoppedEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.common.registry.LanguageRegistry;

@Mod(modid = "TriRadio", name = "Triradio ", version = "0.1", dependencies = "required-after:pixelutilitys")
//@Network(channels = {"RadioBlock"}, clientSideRequired = true, serverSideRequired = false, packetHandler = PacketHandler.class, connectionHandler = ConnectionHandler.class)
public class ModRadioBlock {
	/*
	@Instance
	public static ModRadioBlock instance;
	*/
	/*
	@SidedProxy(clientSide = "net.trigore.radioblock.ClientProxy", serverSide="net.trigore.radioblock.CommonProxy")
	public static CommonProxy proxy;
	
	public final static BlockRadio blockRadio = new BlockRadio(189, Material.wood);
	
	public static List<MP3Player> playerList = new ArrayList<MP3Player>();
	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		AddMeta(event, "0.1");
	}
	
	public void init(FMLInitializationEvent evt){
		
		GameRegistry.registerBlock(blockRadio, "Radio");
		GameRegistry.registerTileEntity(TileEntityRadio.class, "Radio");
		GameRegistry.addRecipe(new ItemStack(blockRadio), "  y", "xyx", "xzx", 'x', new ItemStack(Blocks.planks), 'y', new ItemStack(Items.iron_ingot), 'z', new ItemStack(Items.diamond));
		//LanguageRegistry.addName(blockRadio, "Radio");
		proxy.initTileEntities();
		
	}
	
	public void serverStop(FMLServerStoppedEvent event) {
		//System.out.println("Stopped!");
		killAllStreams();
	}
	
	public static void killAllStreams(){
		for(MP3Player p : playerList){
			p.stop();
		}
	}
	
	 @Mod.EventHandler
	  public void load(FMLInitializationEvent event)
	  {
//		 proxy.registerRenderers();
	  }
	
	
	public static Packet250CustomPayload setPacket(int x, int y, int z, String streamURL, boolean playing){
		Packet250CustomPayload p = new Packet250CustomPayload();
		p.channel = "RadioBlock";
		ByteArrayOutputStream baos = new ByteArrayOutputStream(8);
		DataOutputStream dos = new DataOutputStream(baos);
		try {
			dos.writeInt(0x01);//0x01 will identify this as setting the stream
			dos.writeInt(x);
			dos.writeInt(y);
			dos.writeInt(z);
			dos.writeUTF(streamURL);
			dos.writeBoolean(playing);
		} catch (IOException e) {
			e.printStackTrace();
		}
		p.length = baos.toByteArray().length;
		p.data = baos.toByteArray();
		return p;
	}
	/**
	 * Add Pack Meta Data
	 */
	/*
	private void AddMeta(FMLPreInitializationEvent event, String version) {

		ModMetadata m = event.getModMetadata(); // This is required or it will not work
		m.autogenerated = false; // This is required otherwise it will not work
		m.modId = "TriRadio";
		m.version = version;
		m.name = "Triradio";
		m.url = "";
		m.updateUrl = "";
		m.description = "PixelUtilitys radio";
		m.authorList.add("Trigore");

	}*/
	
}
